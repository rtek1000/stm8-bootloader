                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module timer
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _receiver_data
                                     12 	.globl _enableButton2interrupt
                                     13 	.globl _setButton3stateLOW
                                     14 	.globl _setButton3stateHIGH
                                     15 	.globl _timer_count_enabled
                                     16 	.globl _data_millis_inc
                                     17 	.globl _data_sec_inc
                                     18 	.globl _data_min_inc
                                     19 	.globl _data_bit
                                     20 	.globl _initTimer
                                     21 	.globl _TIM1_UPD_handler
                                     22 	.globl _TIM2_UPD_handler
                                     23 ;--------------------------------------------------------
                                     24 ; ram data
                                     25 ;--------------------------------------------------------
                                     26 	.area DATA
                                     27 ;--------------------------------------------------------
                                     28 ; ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area INITIALIZED
      000000                         31 _data_bit::
      000000                         32 	.ds 1
      000001                         33 _data_min_inc::
      000001                         34 	.ds 1
      000002                         35 _data_sec_inc::
      000002                         36 	.ds 1
      000003                         37 _data_millis_inc::
      000003                         38 	.ds 1
      000004                         39 _timer_count_enabled::
      000004                         40 	.ds 1
                                     41 ;--------------------------------------------------------
                                     42 ; absolute external ram data
                                     43 ;--------------------------------------------------------
                                     44 	.area DABS (ABS)
                                     45 
                                     46 ; default segment ordering for linker
                                     47 	.area HOME
                                     48 	.area GSINIT
                                     49 	.area GSFINAL
                                     50 	.area CONST
                                     51 	.area INITIALIZER
                                     52 	.area CODE
                                     53 
                                     54 ;--------------------------------------------------------
                                     55 ; global & static initialisations
                                     56 ;--------------------------------------------------------
                                     57 	.area HOME
                                     58 	.area GSINIT
                                     59 	.area GSFINAL
                                     60 	.area GSINIT
                                     61 ;--------------------------------------------------------
                                     62 ; Home
                                     63 ;--------------------------------------------------------
                                     64 	.area HOME
                                     65 	.area HOME
                                     66 ;--------------------------------------------------------
                                     67 ; code
                                     68 ;--------------------------------------------------------
                                     69 	.area CODE
                                     70 ;	Core/Src/timer.c: 66: void initTimer(void) {
                                     71 ;	-----------------------------------------
                                     72 ;	 function initTimer
                                     73 ;	-----------------------------------------
      000000                         74 _initTimer:
                                     75 ;	Core/Src/timer.c: 67: disableInterrupts();
      000000 9B               [ 1]   76 	sim
                                     77 ;	Core/Src/timer.c: 77: TIM1_CNTRH = 0xFE;
      000001 35 FE 52 5E      [ 1]   78 	mov	0x525e+0, #0xfe
                                     79 ;	Core/Src/timer.c: 78: TIM1_CNTRL = 0x63;
      000005 35 63 52 5F      [ 1]   80 	mov	0x525f+0, #0x63
                                     81 ;	Core/Src/timer.c: 79: TIM1_PSCRH = 0x00;   // CLK / 1 = 16MHz
      000009 35 00 52 60      [ 1]   82 	mov	0x5260+0, #0x00
                                     83 ;	Core/Src/timer.c: 80: TIM1_PSCRL = 0x01;   // CLK / 1 = 16MHz
      00000D 35 01 52 61      [ 1]   84 	mov	0x5261+0, #0x01
                                     85 ;	Core/Src/timer.c: 81: TIM1_ARRH = 0xFF;    // 16MHz /  1653(0x0675) = 9679.37kHz
      000011 35 FF 52 62      [ 1]   86 	mov	0x5262+0, #0xff
                                     87 ;	Core/Src/timer.c: 82: TIM1_ARRL = 0xFF;    // 16MHz /  1653(0x0675) = 9679.37kHz
      000015 35 FF 52 63      [ 1]   88 	mov	0x5263+0, #0xff
                                     89 ;	Core/Src/timer.c: 83: TIM1_IER = 0x01;    // Enable interrupt on update event
      000019 35 01 52 54      [ 1]   90 	mov	0x5254+0, #0x01
                                     91 ;	Core/Src/timer.c: 86: TIM2_CNTRH = 0xFC; // 0xFCC5
      00001D 35 FC 53 0C      [ 1]   92 	mov	0x530c+0, #0xfc
                                     93 ;	Core/Src/timer.c: 87: TIM2_CNTRL = 0xC5;
      000021 35 C5 53 0D      [ 1]   94 	mov	0x530d+0, #0xc5
                                     95 ;	Core/Src/timer.c: 88: TIM2_PSCR = 0x01;   // CLK / 1 = 16MHz
      000025 35 01 53 0E      [ 1]   96 	mov	0x530e+0, #0x01
                                     97 ;	Core/Src/timer.c: 89: TIM2_ARRH = 0xFF;    // 16MHz /  1653(0x0675) = 9679.37kHz
      000029 35 FF 53 0F      [ 1]   98 	mov	0x530f+0, #0xff
                                     99 ;	Core/Src/timer.c: 90: TIM2_ARRL = 0xFF;    // 16MHz /  1653(0x0675) = 9679.37kHz
      00002D 35 FF 53 10      [ 1]  100 	mov	0x5310+0, #0xff
                                    101 ;	Core/Src/timer.c: 91: TIM2_IER = 0x01;    // Enable interrupt on update event
      000031 35 01 53 03      [ 1]  102 	mov	0x5303+0, #0x01
                                    103 ;	Core/Src/timer.c: 94: enableInterrupts();
      000035 9A               [ 1]  104 	rim
                                    105 ;	Core/Src/timer.c: 95: }
      000036 81               [ 4]  106 	ret
                                    107 ;	Core/Src/timer.c: 97: void TIM1_UPD_handler()
                                    108 ;	-----------------------------------------
                                    109 ;	 function TIM1_UPD_handler
                                    110 ;	-----------------------------------------
      000037                        111 _TIM1_UPD_handler:
      000037 4F               [ 1]  112 	clr	a
      000038 62               [ 2]  113 	div	x, a
                                    114 ;	Core/Src/timer.c: 100: TIM1_SR1 &= ~TIMx_UIF; // Reset flag
      000039 72 11 52 55      [ 1]  115 	bres	21077, #0
                                    116 ;	Core/Src/timer.c: 103: TIM1_CNTRH = 0xFC;
      00003D 35 FC 52 5E      [ 1]  117 	mov	0x525e+0, #0xfc
                                    118 ;	Core/Src/timer.c: 104: TIM1_CNTRL = 0xC5;
      000041 35 C5 52 5F      [ 1]  119 	mov	0x525f+0, #0xc5
                                    120 ;	Core/Src/timer.c: 107: data_bit = (PC_IDR >> 4) & 1;
      000045 C6 50 0B         [ 1]  121 	ld	a, 0x500b
      000048 44               [ 1]  122 	srl	a
      000049 44               [ 1]  123 	srl	a
      00004A 44               [ 1]  124 	srl	a
      00004B 44               [ 1]  125 	srl	a
      00004C A4 01            [ 1]  126 	and	a, #0x01
      00004E C7u00u00         [ 1]  127 	ld	_data_bit+0, a
                                    128 ;	Core/Src/timer.c: 109: if(start_bit == false) {
      000051 72 01u00u00 02   [ 2]  129 	btjf	_start_bit+0, #0, 00134$
      000056 20 16            [ 2]  130 	jra	00110$
      000058                        131 00134$:
                                    132 ;	Core/Src/timer.c: 110: if (data_bit == true) {
      000058 72 00u00u00 02   [ 2]  133 	btjt	_data_bit+0, #0, 00135$
      00005D 20 09            [ 2]  134 	jra	00102$
      00005F                        135 00135$:
                                    136 ;	Core/Src/timer.c: 111: TIM1_CR1 = 0x00;    // Disable timer
      00005F 35 00 52 50      [ 1]  137 	mov	0x5250+0, #0x00
                                    138 ;	Core/Src/timer.c: 113: enableButton2interrupt();
      000063 CDr00r00         [ 4]  139 	call	_enableButton2interrupt
                                    140 ;	Core/Src/timer.c: 115: return;
      000066 20 43            [ 2]  141 	jra	00112$
      000068                        142 00102$:
                                    143 ;	Core/Src/timer.c: 117: start_bit = true;
      000068 35 01u00u00      [ 1]  144 	mov	_start_bit+0, #0x01
      00006C 20 3D            [ 2]  145 	jra	00112$
      00006E                        146 00110$:
                                    147 ;	Core/Src/timer.c: 121: if(data_counter < 8) {
      00006E C6u00u00         [ 1]  148 	ld	a, _data_counter+0
      000071 A1 08            [ 1]  149 	cp	a, #0x08
      000073 24 20            [ 1]  150 	jrnc	00107$
                                    151 ;	Core/Src/timer.c: 123: data_buffer |= data_bit << data_counter;
      000075 5F               [ 1]  152 	clrw	x
      000076 C6u00u00         [ 1]  153 	ld	a, _data_bit+0
      000079 97               [ 1]  154 	ld	xl, a
      00007A C6u00u00         [ 1]  155 	ld	a, _data_counter+0
      00007D 27 04            [ 1]  156 	jreq	00138$
      00007F                        157 00137$:
      00007F 58               [ 2]  158 	sllw	x
      000080 4A               [ 1]  159 	dec	a
      000081 26 FC            [ 1]  160 	jrne	00137$
      000083                        161 00138$:
      000083 9F               [ 1]  162 	ld	a, xl
      000084 CAu00u01         [ 1]  163 	or	a, _data_buffer+1
      000087 02               [ 1]  164 	rlwa	x
      000088 CAu00u00         [ 1]  165 	or	a, _data_buffer+0
      00008B 95               [ 1]  166 	ld	xh, a
      00008C CFu00u00         [ 2]  167 	ldw	_data_buffer+0, x
                                    168 ;	Core/Src/timer.c: 125: data_counter++;
      00008F 72 5Cu00u00      [ 1]  169 	inc	_data_counter+0
      000093 20 16            [ 2]  170 	jra	00112$
      000095                        171 00107$:
                                    172 ;	Core/Src/timer.c: 127: if(data_bit == stop_bit) {
      000095 72 00u00u00 02   [ 2]  173 	btjt	_data_bit+0, #0, 00139$
      00009A 20 08            [ 2]  174 	jra	00105$
      00009C                        175 00139$:
                                    176 ;	Core/Src/timer.c: 128: receiver_data(data_buffer);
      00009C C6u00u01         [ 1]  177 	ld	a, _data_buffer+1
      00009F 88               [ 1]  178 	push	a
      0000A0 CDr00r00         [ 4]  179 	call	_receiver_data
      0000A3 84               [ 1]  180 	pop	a
      0000A4                        181 00105$:
                                    182 ;	Core/Src/timer.c: 131: TIM1_CR1 = 0x00;    // Disable timer
      0000A4 35 00 52 50      [ 1]  183 	mov	0x5250+0, #0x00
                                    184 ;	Core/Src/timer.c: 133: enableButton2interrupt();
      0000A8 CDr00r00         [ 4]  185 	call	_enableButton2interrupt
      0000AB                        186 00112$:
                                    187 ;	Core/Src/timer.c: 137: }
      0000AB 80               [11]  188 	iret
                                    189 ;	Core/Src/timer.c: 139: void TIM2_UPD_handler()
                                    190 ;	-----------------------------------------
                                    191 ;	 function TIM2_UPD_handler
                                    192 ;	-----------------------------------------
      0000AC                        193 _TIM2_UPD_handler:
      0000AC 4F               [ 1]  194 	clr	a
      0000AD 62               [ 2]  195 	div	x, a
                                    196 ;	Core/Src/timer.c: 141: TIM2_SR1 &= ~TIMx_UIF; // Reset flag
      0000AE 72 11 53 04      [ 1]  197 	bres	21252, #0
                                    198 ;	Core/Src/timer.c: 143: TIM2_CNTRH = 0xFC;// 0xFCC5
      0000B2 35 FC 53 0C      [ 1]  199 	mov	0x530c+0, #0xfc
                                    200 ;	Core/Src/timer.c: 144: TIM2_CNTRL = 0xC5;
      0000B6 35 C5 53 0D      [ 1]  201 	mov	0x530d+0, #0xc5
                                    202 ;	Core/Src/timer.c: 146: if(start_bit_send == false) {
      0000BA 72 01u00u00 02   [ 2]  203 	btjf	_start_bit_send+0, #0, 00151$
      0000BF 20 09            [ 2]  204 	jra	00117$
      0000C1                        205 00151$:
                                    206 ;	Core/Src/timer.c: 147: start_bit_send = true;
      0000C1 35 01u00u00      [ 1]  207 	mov	_start_bit_send+0, #0x01
                                    208 ;	Core/Src/timer.c: 149: setButton3stateLOW();
      0000C5 CDr00r00         [ 4]  209 	call	_setButton3stateLOW
      0000C8 20 58            [ 2]  210 	jra	00119$
      0000CA                        211 00117$:
                                    212 ;	Core/Src/timer.c: 152: if(data_counter_send < 8) {
      0000CA C6u00u00         [ 1]  213 	ld	a, _data_counter_send+0
      0000CD A1 08            [ 1]  214 	cp	a, #0x08
      0000CF 24 23            [ 1]  215 	jrnc	00114$
                                    216 ;	Core/Src/timer.c: 153: if (((data_buffer_send >> data_counter_send) & 1) == true) {
      0000D1 CEu00u00         [ 2]  217 	ldw	x, _data_buffer_send+0
      0000D4 C6u00u00         [ 1]  218 	ld	a, _data_counter_send+0
      0000D7 27 04            [ 1]  219 	jreq	00154$
      0000D9                        220 00153$:
      0000D9 57               [ 2]  221 	sraw	x
      0000DA 4A               [ 1]  222 	dec	a
      0000DB 26 FC            [ 1]  223 	jrne	00153$
      0000DD                        224 00154$:
      0000DD 9F               [ 1]  225 	ld	a, xl
      0000DE A4 01            [ 1]  226 	and	a, #0x01
      0000E0 97               [ 1]  227 	ld	xl, a
      0000E1 4F               [ 1]  228 	clr	a
      0000E2 95               [ 1]  229 	ld	xh, a
      0000E3 5A               [ 2]  230 	decw	x
      0000E4 26 05            [ 1]  231 	jrne	00102$
                                    232 ;	Core/Src/timer.c: 154: setButton3stateHIGH();
      0000E6 CDr00r00         [ 4]  233 	call	_setButton3stateHIGH
      0000E9 20 03            [ 2]  234 	jra	00103$
      0000EB                        235 00102$:
                                    236 ;	Core/Src/timer.c: 156: setButton3stateLOW();
      0000EB CDr00r00         [ 4]  237 	call	_setButton3stateLOW
      0000EE                        238 00103$:
                                    239 ;	Core/Src/timer.c: 159: data_counter_send++;
      0000EE 72 5Cu00u00      [ 1]  240 	inc	_data_counter_send+0
      0000F2 20 2E            [ 2]  241 	jra	00119$
      0000F4                        242 00114$:
                                    243 ;	Core/Src/timer.c: 162: if(stop_bit_send == false) {
      0000F4 72 01u00u00 02   [ 2]  244 	btjf	_stop_bit_send+0, #0, 00158$
      0000F9 20 09            [ 2]  245 	jra	00111$
      0000FB                        246 00158$:
                                    247 ;	Core/Src/timer.c: 163: stop_bit_send = true;
      0000FB 35 01u00u00      [ 1]  248 	mov	_stop_bit_send+0, #0x01
                                    249 ;	Core/Src/timer.c: 165: setButton3stateHIGH();
      0000FF CDr00r00         [ 4]  250 	call	_setButton3stateHIGH
      000102 20 1E            [ 2]  251 	jra	00119$
      000104                        252 00111$:
                                    253 ;	Core/Src/timer.c: 168: if(pause_bit_send == false) {
      000104 72 01u00u00 02   [ 2]  254 	btjf	_pause_bit_send+0, #0, 00159$
      000109 20 06            [ 2]  255 	jra	00108$
      00010B                        256 00159$:
                                    257 ;	Core/Src/timer.c: 169: pause_bit_send = true;
      00010B 35 01u00u00      [ 1]  258 	mov	_pause_bit_send+0, #0x01
      00010F 20 11            [ 2]  259 	jra	00119$
      000111                        260 00108$:
                                    261 ;	Core/Src/timer.c: 172: if(empty_bit_send == false) {
      000111 72 01u00u00 02   [ 2]  262 	btjf	_empty_bit_send+0, #0, 00160$
      000116 20 06            [ 2]  263 	jra	00105$
      000118                        264 00160$:
                                    265 ;	Core/Src/timer.c: 173: empty_bit_send = true;
      000118 35 01u00u00      [ 1]  266 	mov	_empty_bit_send+0, #0x01
      00011C 20 04            [ 2]  267 	jra	00119$
      00011E                        268 00105$:
                                    269 ;	Core/Src/timer.c: 176: TIM2_CR1 = 0x00;    // Disable timer
      00011E 35 00 53 00      [ 1]  270 	mov	0x5300+0, #0x00
      000122                        271 00119$:
                                    272 ;	Core/Src/timer.c: 182: }
      000122 80               [11]  273 	iret
                                    274 	.area CODE
                                    275 	.area CONST
                                    276 	.area INITIALIZER
      000000                        277 __xinit__data_bit:
      000000 00                     278 	.db #0x00	;  0
      000001                        279 __xinit__data_min_inc:
      000001 00                     280 	.db #0x00	;  0
      000002                        281 __xinit__data_sec_inc:
      000002 01                     282 	.db #0x01	;  1
      000003                        283 __xinit__data_millis_inc:
      000003 00                     284 	.db #0x00	;  0
      000004                        285 __xinit__timer_count_enabled:
      000004 01                     286 	.db #0x01	;  1
                                    287 	.area CABS (ABS)
