                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module soft_usart
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _pause_bit_send
                                     12 	.globl _stop_bit_send
                                     13 	.globl _start_bit_send
                                     14 	.globl _empty_bit_send
                                     15 	.globl _data_counter_send
                                     16 	.globl _data_buffer_send
                                     17 	.globl _received_data
                                     18 	.globl _received_data_flag
                                     19 	.globl _start_bit
                                     20 	.globl _data_buffer
                                     21 	.globl _data_counter
                                     22 	.globl _initSerialReceiver
                                     23 	.globl _receiver_data
                                     24 	.globl _enableButton2interrupt
                                     25 	.globl _disableButton2interrupt
                                     26 	.globl _setButton3stateHIGH
                                     27 	.globl _setButton3stateLOW
                                     28 	.globl _receiver_Handle
                                     29 	.globl _serial_sender_byte
                                     30 	.globl _EXTI2_handler
                                     31 ;--------------------------------------------------------
                                     32 ; ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area DATA
                                     35 ;--------------------------------------------------------
                                     36 ; ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area INITIALIZED
      000000                         39 _data_counter::
      000000                         40 	.ds 1
      000001                         41 _data_buffer::
      000001                         42 	.ds 2
      000003                         43 _start_bit::
      000003                         44 	.ds 1
      000004                         45 _received_data_flag::
      000004                         46 	.ds 1
      000005                         47 _received_data::
      000005                         48 	.ds 1
      000006                         49 _data_buffer_send::
      000006                         50 	.ds 2
      000008                         51 _data_counter_send::
      000008                         52 	.ds 1
      000009                         53 _empty_bit_send::
      000009                         54 	.ds 1
      00000A                         55 _start_bit_send::
      00000A                         56 	.ds 1
      00000B                         57 _stop_bit_send::
      00000B                         58 	.ds 1
      00000C                         59 _pause_bit_send::
      00000C                         60 	.ds 1
                                     61 ;--------------------------------------------------------
                                     62 ; absolute external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area DABS (ABS)
                                     65 
                                     66 ; default segment ordering for linker
                                     67 	.area HOME
                                     68 	.area GSINIT
                                     69 	.area GSFINAL
                                     70 	.area CONST
                                     71 	.area INITIALIZER
                                     72 	.area CODE
                                     73 
                                     74 ;--------------------------------------------------------
                                     75 ; global & static initialisations
                                     76 ;--------------------------------------------------------
                                     77 	.area HOME
                                     78 	.area GSINIT
                                     79 	.area GSFINAL
                                     80 	.area GSINIT
                                     81 ;--------------------------------------------------------
                                     82 ; Home
                                     83 ;--------------------------------------------------------
                                     84 	.area HOME
                                     85 	.area HOME
                                     86 ;--------------------------------------------------------
                                     87 ; code
                                     88 ;--------------------------------------------------------
                                     89 	.area CODE
                                     90 ;	Core/Src/soft_usart.c: 28: void initSerialReceiver(void) {
                                     91 ;	-----------------------------------------
                                     92 ;	 function initSerialReceiver
                                     93 ;	-----------------------------------------
      000000                         94 _initSerialReceiver:
                                     95 ;	Core/Src/soft_usart.c: 29: disableInterrupts();
      000000 9B               [ 1]   96 	sim
                                     97 ;	Core/Src/soft_usart.c: 31: PC_DDR &= ~(BUTTON2_BIT | BUTTON3_BIT);  // Input
      000001 C6 50 0C         [ 1]   98 	ld	a, 0x500c
      000004 A4 CF            [ 1]   99 	and	a, #0xcf
      000006 C7 50 0C         [ 1]  100 	ld	0x500c, a
                                    101 ;	Core/Src/soft_usart.c: 32: PC_CR2 |= BUTTON2_BIT;                   // interrupt
      000009 72 18 50 0E      [ 1]  102 	bset	20494, #4
                                    103 ;	Core/Src/soft_usart.c: 33: PC_CR1 |= BUTTON2_BIT | BUTTON3_BIT;     // Pull-up
      00000D C6 50 0D         [ 1]  104 	ld	a, 0x500d
      000010 AA 30            [ 1]  105 	or	a, #0x30
      000012 C7 50 0D         [ 1]  106 	ld	0x500d, a
                                    107 ;	Core/Src/soft_usart.c: 35: EXTI_CR1 |= 0x20;   // generate interrupt on falling edge.
      000015 C6 50 A0         [ 1]  108 	ld	a, 0x50a0
      000018 AA 20            [ 1]  109 	or	a, #0x20
      00001A C7 50 A0         [ 1]  110 	ld	0x50a0, a
                                    111 ;	Core/Src/soft_usart.c: 37: enableInterrupts();
      00001D 9A               [ 1]  112 	rim
                                    113 ;	Core/Src/soft_usart.c: 38: }
      00001E 81               [ 4]  114 	ret
                                    115 ;	Core/Src/soft_usart.c: 40: void receiver_data(unsigned char _data){
                                    116 ;	-----------------------------------------
                                    117 ;	 function receiver_data
                                    118 ;	-----------------------------------------
      00001F                        119 _receiver_data:
                                    120 ;	Core/Src/soft_usart.c: 41: received_data = _data;
      00001F 7B 03            [ 1]  121 	ld	a, (0x03, sp)
      000021 C7u00u05         [ 1]  122 	ld	_received_data+0, a
                                    123 ;	Core/Src/soft_usart.c: 43: received_data_flag = true;
      000024 35 01u00u04      [ 1]  124 	mov	_received_data_flag+0, #0x01
                                    125 ;	Core/Src/soft_usart.c: 44: }
      000028 81               [ 4]  126 	ret
                                    127 ;	Core/Src/soft_usart.c: 46: void enableButton2interrupt(void) {
                                    128 ;	-----------------------------------------
                                    129 ;	 function enableButton2interrupt
                                    130 ;	-----------------------------------------
      000029                        131 _enableButton2interrupt:
                                    132 ;	Core/Src/soft_usart.c: 47: PC_CR2 |= BUTTON2_BIT;   // Pull-up with interrupt on pin PC4
      000029 72 18 50 0E      [ 1]  133 	bset	20494, #4
                                    134 ;	Core/Src/soft_usart.c: 48: }
      00002D 81               [ 4]  135 	ret
                                    136 ;	Core/Src/soft_usart.c: 50: void disableButton2interrupt(void) {
                                    137 ;	-----------------------------------------
                                    138 ;	 function disableButton2interrupt
                                    139 ;	-----------------------------------------
      00002E                        140 _disableButton2interrupt:
                                    141 ;	Core/Src/soft_usart.c: 51: PC_CR2 &= ~BUTTON2_BIT;   // Pull-up with Not interrupt on pin PC4
      00002E 72 19 50 0E      [ 1]  142 	bres	20494, #4
                                    143 ;	Core/Src/soft_usart.c: 52: }
      000032 81               [ 4]  144 	ret
                                    145 ;	Core/Src/soft_usart.c: 54: void setButton3stateHIGH(void) {
                                    146 ;	-----------------------------------------
                                    147 ;	 function setButton3stateHIGH
                                    148 ;	-----------------------------------------
      000033                        149 _setButton3stateHIGH:
                                    150 ;	Core/Src/soft_usart.c: 56: PC_DDR &= ~BUTTON3_BIT;
      000033 72 1B 50 0C      [ 1]  151 	bres	20492, #5
                                    152 ;	Core/Src/soft_usart.c: 57: }
      000037 81               [ 4]  153 	ret
                                    154 ;	Core/Src/soft_usart.c: 59: void setButton3stateLOW(void) {
                                    155 ;	-----------------------------------------
                                    156 ;	 function setButton3stateLOW
                                    157 ;	-----------------------------------------
      000038                        158 _setButton3stateLOW:
                                    159 ;	Core/Src/soft_usart.c: 61: PC_ODR &= ~BUTTON3_BIT;
      000038 72 1B 50 0A      [ 1]  160 	bres	20490, #5
                                    161 ;	Core/Src/soft_usart.c: 63: PC_DDR |= BUTTON3_BIT;
      00003C 72 1A 50 0C      [ 1]  162 	bset	20492, #5
                                    163 ;	Core/Src/soft_usart.c: 64: }
      000040 81               [ 4]  164 	ret
                                    165 ;	Core/Src/soft_usart.c: 66: void receiver_Handle(void) {
                                    166 ;	-----------------------------------------
                                    167 ;	 function receiver_Handle
                                    168 ;	-----------------------------------------
      000041                        169 _receiver_Handle:
                                    170 ;	Core/Src/soft_usart.c: 67: disableButton2interrupt();
      000041 CDr00r2E         [ 4]  171 	call	_disableButton2interrupt
                                    172 ;	Core/Src/soft_usart.c: 69: data_counter = 0;
      000044 72 5Fu00u00      [ 1]  173 	clr	_data_counter+0
                                    174 ;	Core/Src/soft_usart.c: 70: data_buffer = 0;
      000048 5F               [ 1]  175 	clrw	x
      000049 CFu00u01         [ 2]  176 	ldw	_data_buffer+0, x
                                    177 ;	Core/Src/soft_usart.c: 71: start_bit = false;
      00004C 72 5Fu00u03      [ 1]  178 	clr	_start_bit+0
                                    179 ;	Core/Src/soft_usart.c: 73: TIM1_CNTRH = 0xFE;
      000050 35 FE 52 5E      [ 1]  180 	mov	0x525e+0, #0xfe
                                    181 ;	Core/Src/soft_usart.c: 74: TIM1_CNTRL = 0x63;
      000054 35 63 52 5F      [ 1]  182 	mov	0x525f+0, #0x63
                                    183 ;	Core/Src/soft_usart.c: 76: TIM1_CR1 = 0x05;    // Enable timer
      000058 35 05 52 50      [ 1]  184 	mov	0x5250+0, #0x05
                                    185 ;	Core/Src/soft_usart.c: 77: }
      00005C 81               [ 4]  186 	ret
                                    187 ;	Core/Src/soft_usart.c: 79: void serial_sender_byte(unsigned char data) {
                                    188 ;	-----------------------------------------
                                    189 ;	 function serial_sender_byte
                                    190 ;	-----------------------------------------
      00005D                        191 _serial_sender_byte:
                                    192 ;	Core/Src/soft_usart.c: 80: empty_bit_send = false;
      00005D 72 5Fu00u09      [ 1]  193 	clr	_empty_bit_send+0
                                    194 ;	Core/Src/soft_usart.c: 82: start_bit_send = false;
      000061 72 5Fu00u0A      [ 1]  195 	clr	_start_bit_send+0
                                    196 ;	Core/Src/soft_usart.c: 84: stop_bit_send = false;
      000065 72 5Fu00u0B      [ 1]  197 	clr	_stop_bit_send+0
                                    198 ;	Core/Src/soft_usart.c: 86: data_buffer_send = data;
      000069 5F               [ 1]  199 	clrw	x
      00006A 7B 03            [ 1]  200 	ld	a, (0x03, sp)
      00006C 97               [ 1]  201 	ld	xl, a
      00006D CFu00u06         [ 2]  202 	ldw	_data_buffer_send+0, x
                                    203 ;	Core/Src/soft_usart.c: 88: data_counter_send = 0;
      000070 72 5Fu00u08      [ 1]  204 	clr	_data_counter_send+0
                                    205 ;	Core/Src/soft_usart.c: 90: TIM2_CR1 = 0x05;    // Enable timer
      000074 35 05 53 00      [ 1]  206 	mov	0x5300+0, #0x05
                                    207 ;	Core/Src/soft_usart.c: 91: }
      000078 81               [ 4]  208 	ret
                                    209 ;	Core/Src/soft_usart.c: 93: void EXTI2_handler() __interrupt (5){
                                    210 ;	-----------------------------------------
                                    211 ;	 function EXTI2_handler
                                    212 ;	-----------------------------------------
      000079                        213 _EXTI2_handler:
                                    214 ;	Core/Src/soft_usart.c: 94: receiver_Handle();
      000079 CDr00r41         [ 4]  215 	call	_receiver_Handle
                                    216 ;	Core/Src/soft_usart.c: 95: }
      00007C 80               [11]  217 	iret
                                    218 	.area CODE
                                    219 	.area CONST
                                    220 	.area INITIALIZER
      000000                        221 __xinit__data_counter:
      000000 00                     222 	.db #0x00	; 0
      000001                        223 __xinit__data_buffer:
      000001 00 00                  224 	.dw #0x0000
      000003                        225 __xinit__start_bit:
      000003 00                     226 	.db #0x00	;  0
      000004                        227 __xinit__received_data_flag:
      000004 00                     228 	.db #0x00	;  0
      000005                        229 __xinit__received_data:
      000005 00                     230 	.db #0x00	; 0
      000006                        231 __xinit__data_buffer_send:
      000006 00 00                  232 	.dw #0x0000
      000008                        233 __xinit__data_counter_send:
      000008 00                     234 	.db #0x00	; 0
      000009                        235 __xinit__empty_bit_send:
      000009 01                     236 	.db #0x01	;  1
      00000A                        237 __xinit__start_bit_send:
      00000A 00                     238 	.db #0x00	;  0
      00000B                        239 __xinit__stop_bit_send:
      00000B 00                     240 	.db #0x00	;  0
      00000C                        241 __xinit__pause_bit_send:
      00000C 00                     242 	.db #0x00	;  0
                                    243 	.area CABS (ABS)
