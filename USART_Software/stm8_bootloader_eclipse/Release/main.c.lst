                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _serial_sender_byte
                                     13 ;--------------------------------------------------------
                                     14 ; ram data
                                     15 ;--------------------------------------------------------
                                     16 	.area DATA
      000000                         17 _CRC:
      000000                         18 	.ds 1
      000001                         19 _f_ram:
      000001                         20 	.ds 128
      000081                         21 _rx_buffer:
      000081                         22 	.ds 64
      0000C1                         23 _RAM_SEG_LEN:
      0000C1                         24 	.ds 1
                                     25 ;--------------------------------------------------------
                                     26 ; ram data
                                     27 ;--------------------------------------------------------
                                     28 	.area INITIALIZED
      000000                         29 _flash_write_block:
      000000                         30 	.ds 2
                                     31 ;--------------------------------------------------------
                                     32 ; Stack segment in internal ram 
                                     33 ;--------------------------------------------------------
                                     34 	.area	SSEG
      000000                         35 __start__stack:
      000000                         36 	.ds	1
                                     37 
                                     38 ;--------------------------------------------------------
                                     39 ; absolute external ram data
                                     40 ;--------------------------------------------------------
                                     41 	.area DABS (ABS)
                                     42 
                                     43 ; default segment ordering for linker
                                     44 	.area HOME
                                     45 	.area GSINIT
                                     46 	.area GSFINAL
                                     47 	.area CONST
                                     48 	.area INITIALIZER
                                     49 	.area CODE
                                     50 
                                     51 ;--------------------------------------------------------
                                     52 ; interrupt vector 
                                     53 ;--------------------------------------------------------
                                     54 	.area HOME
      000000                         55 __interrupt_vect:
      000000 82v00u00u00             56 	int s_GSINIT ; reset
      000004 82 00 00 00             57 	int 0x000000 ; trap
      000008 82 00 00 00             58 	int 0x000000 ; int0
      00000C 82 00 00 00             59 	int 0x000000 ; int1
      000010 82 00 00 00             60 	int 0x000000 ; int2
      000014 82 00 00 00             61 	int 0x000000 ; int3
      000018 82 00 00 00             62 	int 0x000000 ; int4
      00001C 82v00u00u00             63 	int _EXTI2_handler ; int5
      000020 82 00 00 00             64 	int 0x000000 ; int6
      000024 82 00 00 00             65 	int 0x000000 ; int7
      000028 82 00 00 00             66 	int 0x000000 ; int8
      00002C 82 00 00 00             67 	int 0x000000 ; int9
      000030 82 00 00 00             68 	int 0x000000 ; int10
      000034 82v00u00u00             69 	int _TIM1_UPD_handler ; int11
      000038 82 00 00 00             70 	int 0x000000 ; int12
      00003C 82v00u00u00             71 	int _TIM2_UPD_handler ; int13
                                     72 ;--------------------------------------------------------
                                     73 ; global & static initialisations
                                     74 ;--------------------------------------------------------
                                     75 	.area HOME
                                     76 	.area GSINIT
                                     77 	.area GSFINAL
                                     78 	.area GSINIT
      000000                         79 __sdcc_gs_init_startup:
      000000                         80 __sdcc_init_data:
                                     81 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   82 	ldw x, #l_DATA
      000003 27 07            [ 1]   83 	jreq	00002$
      000005                         84 00001$:
      000005 72 4FuFFuFF      [ 1]   85 	clr (s_DATA - 1, x)
      000009 5A               [ 2]   86 	decw x
      00000A 26 F9            [ 1]   87 	jrne	00001$
      00000C                         88 00002$:
      00000C AEr00r00         [ 2]   89 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]   90 	jreq	00004$
      000011                         91 00003$:
      000011 D6uFFuFF         [ 1]   92 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]   93 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]   94 	decw	x
      000018 26 F7            [ 1]   95 	jrne	00003$
      00001A                         96 00004$:
                                     97 ; stm8_genXINIT() end
                                     98 	.area GSFINAL
      000000 CCr00r40         [ 2]   99 	jp	__sdcc_program_startup
                                    100 ;--------------------------------------------------------
                                    101 ; Home
                                    102 ;--------------------------------------------------------
                                    103 	.area HOME
                                    104 	.area HOME
      000040                        105 __sdcc_program_startup:
      000040 CCr00r83         [ 2]  106 	jp	_main
                                    107 ;	return from main will return to caller
                                    108 ;--------------------------------------------------------
                                    109 ; code
                                    110 ;--------------------------------------------------------
                                    111 	.area CODE
                                    112 ;	Core/Src/main.c: 73: static void uart_write(uint8_t data) {
                                    113 ;	-----------------------------------------
                                    114 ;	 function uart_write
                                    115 ;	-----------------------------------------
      000000                        116 _uart_write:
                                    117 ;	Core/Src/main.c: 74: serial_sender_byte(data);
      000000 7B 03            [ 1]  118 	ld	a, (0x03, sp)
      000002 88               [ 1]  119 	push	a
      000003 CDr00r00         [ 4]  120 	call	_serial_sender_byte
      000006 84               [ 1]  121 	pop	a
                                    122 ;	Core/Src/main.c: 76: while(empty_bit_send == false);
      000007                        123 00101$:
      000007 72 00u00u00 02   [ 2]  124 	btjt	_empty_bit_send+0, #0, 00111$
      00000C 20 F9            [ 2]  125 	jra	00101$
      00000E                        126 00111$:
                                    127 ;	Core/Src/main.c: 79: }
      00000E 81               [ 4]  128 	ret
                                    129 ;	Core/Src/main.c: 84: static uint8_t uart_read() {
                                    130 ;	-----------------------------------------
                                    131 ;	 function uart_read
                                    132 ;	-----------------------------------------
      00000F                        133 _uart_read:
                                    134 ;	Core/Src/main.c: 51: IWDG_KR = IWDG_KEY_REFRESH;
      00000F 35 AA 50 E0      [ 1]  135 	mov	0x50e0+0, #0xaa
                                    136 ;	Core/Src/main.c: 86: received_data_flag = false;
      000013 72 5Fu00u00      [ 1]  137 	clr	_received_data_flag+0
                                    138 ;	Core/Src/main.c: 88: while(received_data_flag == false);
      000017                        139 00101$:
      000017 72 00u00u00 02   [ 2]  140 	btjt	_received_data_flag+0, #0, 00117$
      00001C 20 F9            [ 2]  141 	jra	00101$
      00001E                        142 00117$:
                                    143 ;	Core/Src/main.c: 90: return received_data;
      00001E C6u00u00         [ 1]  144 	ld	a, _received_data+0
                                    145 ;	Core/Src/main.c: 95: }
      000021 81               [ 4]  146 	ret
                                    147 ;	Core/Src/main.c: 115: static void serial_send_ack() {
                                    148 ;	-----------------------------------------
                                    149 ;	 function serial_send_ack
                                    150 ;	-----------------------------------------
      000022                        151 _serial_send_ack:
                                    152 ;	Core/Src/main.c: 116: uart_write(0xAA);
      000022 4B AA            [ 1]  153 	push	#0xaa
      000024 CDr00r00         [ 4]  154 	call	_uart_write
      000027 84               [ 1]  155 	pop	a
                                    156 ;	Core/Src/main.c: 117: uart_write(0xBB);
      000028 4B BB            [ 1]  157 	push	#0xbb
      00002A CDr00r00         [ 4]  158 	call	_uart_write
      00002D 84               [ 1]  159 	pop	a
                                    160 ;	Core/Src/main.c: 118: }
      00002E 81               [ 4]  161 	ret
                                    162 ;	Core/Src/main.c: 133: static void serial_read_block(uint8_t *dest) {
                                    163 ;	-----------------------------------------
                                    164 ;	 function serial_read_block
                                    165 ;	-----------------------------------------
      00002F                        166 _serial_read_block:
      00002F 52 04            [ 2]  167 	sub	sp, #4
                                    168 ;	Core/Src/main.c: 134: serial_send_ack();
      000031 CDr00r22         [ 4]  169 	call	_serial_send_ack
                                    170 ;	Core/Src/main.c: 135: for (uint8_t i = 0; i < BLOCK_SIZE; i++) {
      000034 0F 03            [ 1]  171 	clr	(0x03, sp)
      000036                        172 00108$:
      000036 7B 03            [ 1]  173 	ld	a, (0x03, sp)
      000038 A1 40            [ 1]  174 	cp	a, #0x40
      00003A 24 44            [ 1]  175 	jrnc	00110$
                                    176 ;	Core/Src/main.c: 136: uint8_t rx = uart_read();
      00003C CDr00r0F         [ 4]  177 	call	_uart_read
      00003F 6B 04            [ 1]  178 	ld	(0x04, sp), a
                                    179 ;	Core/Src/main.c: 137: dest[i] = rx;
      000041 5F               [ 1]  180 	clrw	x
      000042 7B 03            [ 1]  181 	ld	a, (0x03, sp)
      000044 97               [ 1]  182 	ld	xl, a
      000045 72 FB 07         [ 2]  183 	addw	x, (0x07, sp)
      000048 7B 04            [ 1]  184 	ld	a, (0x04, sp)
      00004A F7               [ 1]  185 	ld	(x), a
                                    186 ;	Core/Src/main.c: 138: CRC = crc8_update(rx, CRC);
      00004B C6u00u00         [ 1]  187 	ld	a, _CRC+0
                                    188 ;	Core/Src/main.c: 106: crc ^= data;
      00004E 18 04            [ 1]  189 	xor	a, (0x04, sp)
      000050 95               [ 1]  190 	ld	xh, a
                                    191 ;	Core/Src/main.c: 107: for (uint8_t i = 0; i < 8; i++)
      000051 0F 04            [ 1]  192 	clr	(0x04, sp)
      000053                        193 00105$:
      000053 7B 04            [ 1]  194 	ld	a, (0x04, sp)
      000055 A1 08            [ 1]  195 	cp	a, #0x08
      000057 24 1F            [ 1]  196 	jrnc	00102$
                                    197 ;	Core/Src/main.c: 108: crc = (crc & 0x80) ? (crc << 1) ^ 0x07 : crc << 1;
      000059 9E               [ 1]  198 	ld	a, xh
      00005A 48               [ 1]  199 	sll	a
      00005B 6B 02            [ 1]  200 	ld	(0x02, sp), a
      00005D 49               [ 1]  201 	rlc	a
      00005E 4F               [ 1]  202 	clr	a
      00005F A2 00            [ 1]  203 	sbc	a, #0x00
      000061 5D               [ 2]  204 	tnzw	x
      000062 2A 0B            [ 1]  205 	jrpl	00112$
      000064 88               [ 1]  206 	push	a
      000065 7B 03            [ 1]  207 	ld	a, (0x03, sp)
      000067 A8 07            [ 1]  208 	xor	a, #0x07
      000069 95               [ 1]  209 	ld	xh, a
      00006A 84               [ 1]  210 	pop	a
      00006B 6B 01            [ 1]  211 	ld	(0x01, sp), a
      00006D 20 05            [ 2]  212 	jra	00113$
      00006F                        213 00112$:
      00006F 6B 01            [ 1]  214 	ld	(0x01, sp), a
      000071 7B 02            [ 1]  215 	ld	a, (0x02, sp)
      000073 95               [ 1]  216 	ld	xh, a
      000074                        217 00113$:
                                    218 ;	Core/Src/main.c: 107: for (uint8_t i = 0; i < 8; i++)
      000074 0C 04            [ 1]  219 	inc	(0x04, sp)
      000076 20 DB            [ 2]  220 	jra	00105$
      000078                        221 00102$:
                                    222 ;	Core/Src/main.c: 138: CRC = crc8_update(rx, CRC);
      000078 9E               [ 1]  223 	ld	a, xh
      000079 C7u00u00         [ 1]  224 	ld	_CRC+0, a
                                    225 ;	Core/Src/main.c: 135: for (uint8_t i = 0; i < BLOCK_SIZE; i++) {
      00007C 0C 03            [ 1]  226 	inc	(0x03, sp)
      00007E 20 B6            [ 2]  227 	jra	00108$
      000080                        228 00110$:
                                    229 ;	Core/Src/main.c: 140: }
      000080 5B 04            [ 2]  230 	addw	sp, #4
      000082 81               [ 4]  231 	ret
                                    232 ;	Core/Src/main.c: 223: void main(void) {
                                    233 ;	-----------------------------------------
                                    234 ;	 function main
                                    235 ;	-----------------------------------------
      000083                        236 _main:
                                    237 ;	Core/Src/main.c: 231: BOOT_PIN_CR1 = 1 << BOOT_PIN;
      000083 35 08 50 0D      [ 1]  238 	mov	0x500d+0, #0x08
                                    239 ;	Core/Src/main.c: 232: if (!(BOOT_PIN_IDR & (1 << BOOT_PIN))) {
      000087 C6 50 0B         [ 1]  240 	ld	a, 0x500b
      00008A A5 08            [ 1]  241 	bcp	a, #0x08
      00008C 26 05            [ 1]  242 	jrne	00102$
                                    243 ;	Core/Src/main.c: 234: CLK_CKDIVR = 0;
      00008E 35 00 50 C6      [ 1]  244 	mov	0x50c6+0, #0x00
      000092 81               [ 4]  245 	ret
      000093                        246 00102$:
                                    247 ;	Core/Src/main.c: 242: BOOT_PIN_CR1 = 0x00;
      000093 35 00 50 0D      [ 1]  248 	mov	0x500d+0, #0x00
                                    249 ;	Core/Src/main.c: 243: BOOT();
      000097 CC 83 C0         [ 2]  250 	jp	0x83C0
                                    251 ;	Core/Src/main.c: 245: }
      00009A 81               [ 4]  252 	ret
                                    253 	.area CODE
                                    254 	.area CONST
                                    255 	.area INITIALIZER
      000000                        256 __xinit__flash_write_block:
      000000r00r01                  257 	.dw _f_ram
                                    258 	.area CABS (ABS)
